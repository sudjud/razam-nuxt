{"version":3,"file":"useCountAnimation.mjs","sources":["../../../../scripts/useCountAnimation.js"],"sourcesContent":["import { ref, onMounted } from \"vue\";\n\nexport function useCountAnimation(targetValue, duration = 2000) {\n  const count = ref(0);\n  let observer = null;\n\n  const startCounting = () => {\n    let startTime = null;\n    const step = (timestamp) => {\n      if (!startTime) startTime = timestamp;\n      let progress = Math.min((timestamp - startTime) / duration, 1);\n      count.value = Math.floor(progress * targetValue);\n      if (progress < 1) {\n        requestAnimationFrame(step);\n      } else {\n        count.value = targetValue; // Убеждаемся, что в конце число корректное\n      }\n    };\n    requestAnimationFrame(step);\n  };\n\n  onMounted(() => {\n    const element = document.querySelector(\".statistics\");\n    if (!element) return;\n\n    observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          startCounting();\n          observer.disconnect(); // Останавливаем наблюдение после активации\n        }\n      },\n      { threshold: 0.5 }\n    );\n\n    observer.observe(element);\n  });\n\n  return { count };\n}\n"],"names":[],"mappings":";AAEgB,SAAA,kBAAkB,aAAa,WAAW,KAAM;AACxD,QAAA,QAAQ,IAAI,CAAC;AAmCnB,SAAO,EAAE,MAAM;AACjB;"}