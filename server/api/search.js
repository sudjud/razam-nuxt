import ru from "../../locales/ru";
import en from "../../locales/en";
import fr from "../../locales/fr";
import projects from "~/server/data/projects";
import blog from "~/server/data/blog";

const translations = { ru, en, fr };

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
const getTranslation = (key, lang) => {
  return key.split('.').reduce((obj, part) => obj?.[part], translations[lang]) || key;
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç–∞—Ç—å—è–º –∏ –ø—Ä–æ–µ–∫—Ç–∞–º
export default defineEventHandler((event) => {
  const query = getQuery(event);
  const lang = query.lang || "ru"; // –Ø–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "ru")
  const keyword = query.q?.toLowerCase().trim(); // –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å

  if (!keyword) {
    return { error: "No search query provided" };
  }

  // üîç –ü–æ–∏—Å–∫ –≤ blog
  const matchedArticles = blog.filter(article => {
    const translatedName = getTranslation(article.name, lang).toLowerCase();
    const translatedCategory = getTranslation(article.category, lang).toLowerCase();
    
    return translatedName.includes(keyword) || translatedCategory.includes(keyword);
  }).map(article => ({
    ...article,
    name: getTranslation(article.name, lang), // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    category: getTranslation(article.category, lang) // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  }));

  // üîç –ü–æ–∏—Å–∫ –≤ projects
  const matchedProjects = projects.filter(project => {
    const translatedCategory = getTranslation(project.category, lang).toLowerCase();
    const translatedType = getTranslation(project.type, lang).toLowerCase();
    
    return (
      project.name.toLowerCase().includes(keyword) || // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
      translatedCategory.includes(keyword) || // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      translatedType.includes(keyword) // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–∏–ø
    );
  }).map(project => ({
    ...project,
    category: getTranslation(project.category, lang), // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    type: getTranslation(project.type, lang) // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–∏–ø
  }));

  return {
    articles: matchedArticles,
    projects: matchedProjects,
  };
});
